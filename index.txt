<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SmartLift Customer Portal</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/lucide.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .animate-spin {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;
        
        // ✅ Updated with your actual API Gateway URL
        const API_BASE_URL = 'https://4cc23kla34.execute-api.us-east-1.amazonaws.com/prod';
        
        const SmartLiftApp = () => {
            const [currentView, setCurrentView] = useState('dashboard');
            const [loading, setLoading] = useState(false);
            const [error, setError] = useState(null);
            const [customerId] = useState('golden-plaza-hotel');
            
            const [notifications, setNotifications] = useState([]);
            const [serviceRequests, setServiceRequests] = useState([]);
            const [elevatorStatus, setElevatorStatus] = useState([]);
            const [maintenanceSchedule, setMaintenanceSchedule] = useState([]);
            const [systemSummary, setSystemSummary] = useState({
                operational: 0,
                maintenance: 0,
                activeRequests: 0,
                uptime: 0
            });

            const [newRequest, setNewRequest] = useState({
                elevator_id: '',
                priority: 'Medium',
                description: '',
                contact_preference: 'email'
            });

            const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

            const apiCall = async (endpoint, options = {}) => {
                try {
                    setError(null);
                    
                    const url = `${API_BASE_URL}/customer${endpoint}`;
                    const queryParams = endpoint.includes('?') ? '&' : '?';
                    const fullUrl = `${url}${queryParams}customer_id=${customerId}`;
                    
                    console.log('API Call:', fullUrl);
                    
                    const response = await fetch(fullUrl, {
                        headers: {
                            'Content-Type': 'application/json',
                            ...options.headers
                        },
                        ...options
                    });

                    if (!response.ok) {
                        throw new Error(`API Error: ${response.status} ${response.statusText}`);
                    }

                    const data = await response.json();
                    console.log('API Response:', data);
                    return data;
                } catch (error) {
                    console.error('API Call Error:', error);
                    setError(error.message);
                    throw error;
                }
            };

            const loadElevatorStatus = async () => {
                try {
                    setLoading(true);
                    const data = await apiCall('/elevators/status');
                    setElevatorStatus(data.elevators || []);
                    setSystemSummary(data.summary || {});
                    setError(null);
                } catch (error) {
                    console.error('Failed to load elevator status:', error);
                    setElevatorStatus([
                        { id: 'A', location: 'Main Lobby', status: 'operational', current_floor: 5, capacity_percentage: '80%', last_service_date: '2024-09-15' },
                        { id: 'B', location: 'North Tower', status: 'maintenance', current_floor: 1, capacity_percentage: '0%', last_service_date: '2024-09-10' },
                        { id: 'C', location: 'Parking Garage', status: 'operational', current_floor: 3, capacity_percentage: '45%', last_service_date: '2024-09-12' }
                    ]);
                    setSystemSummary({ operational: 2, maintenance: 1, activeRequests: 1, uptime: 66.7 });
                } finally {
                    setLoading(false);
                }
            };

            const loadServiceRequests = async () => {
                try {
                    setLoading(true);
                    const data = await apiCall('/service-requests');
                    setServiceRequests(data.service_requests || []);
                    setError(null);
                } catch (error) {
                    console.error('Failed to load service requests:', error);
                    setServiceRequests([
                        {
                            id: 1,
                            elevator: 'Elevator A - Main Lobby',
                            issue: 'Slow door response',
                            priority: 'Medium',
                            status: 'In Progress',
                            technician: 'Mike Johnson',
                            estimated_completion: '2024-09-23 14:00'
                        }
                    ]);
                } finally {
                    setLoading(false);
                }
            };

            const loadNotifications = async () => {
                try {
                    const data = await apiCall('/notifications');
                    setNotifications(data.notifications || []);
                } catch (error) {
                    console.error('Failed to load notifications:', error);
                    setNotifications([
                        { id: 1, type: 'maintenance', message: 'Scheduled maintenance reminder for Elevator A', time_ago: '2 hours ago' },
                        { id: 2, type: 'alert', message: 'Service request completed successfully', time_ago: '4 hours ago' }
                    ]);
                }
            };

            const loadMaintenanceSchedule = async () => {
                try {
                    setLoading(true);
                    const data = await apiCall('/maintenance/schedule');
                    setMaintenanceSchedule(data.maintenance_schedule || []);
                    setError(null);
                } catch (error) {
                    console.error('Failed to load maintenance schedule:', error);
                    setMaintenanceSchedule([
                        {
                            id: 1,
                            elevator_id: 'A',
                            elevator_location: 'Main Lobby',
                            maintenance_type: 'Quarterly Inspection',
                            scheduled_date: '2024-09-25',
                            scheduled_time: '09:00',
                            technician: 'Mike Johnson',
                            status: 'Upcoming'
                        }
                    ]);
                } finally {
                    setLoading(false);
                }
            };

            const submitServiceRequest = async () => {
                try {
                    if (!newRequest.elevator_id || !newRequest.description) {
                        setError('Please fill in all required fields');
                        return;
                    }

                    setLoading(true);
                    const response = await apiCall('/service-requests', {
                        method: 'POST',
                        body: JSON.stringify({
                            customer_id: customerId,
                            ...newRequest
                        })
                    });

                    setNewRequest({
                        elevator_id: '',
                        priority: 'Medium',
                        description: '',
                        contact_preference: 'email'
                    });
                    
                    setCurrentView('requests');
                    await loadServiceRequests();
                    
                    alert(`Service request submitted successfully! Request ID: ${response.request_id}`);
                    setError(null);
                } catch (error) {
                    console.error('Failed to submit service request:', error);
                } finally {
                    setLoading(false);
                }
            };

            const handleEmergencyContact = async (contactType) => {
                try {
                    setLoading(true);
                    const response = await apiCall('/emergency/contact', {
                        method: 'POST',
                        body: JSON.stringify({
                            customer_id: customerId,
                            contact_type: contactType,
                            timestamp: new Date().toISOString(),
                            customer_name: 'Golden Plaza Hotel',
                            location: 'Main Building'
                        })
                    });

                    alert(`Emergency contact sent! Ticket ID: ${response.emergency_id}\n${response.message}`);
                    setError(null);
                } catch (error) {
                    console.error('Failed to send emergency contact:', error);
                } finally {
                    setLoading(false);
                }
            };

            useEffect(() => {
                loadElevatorStatus();
                loadServiceRequests();
                loadNotifications();
                loadMaintenanceSchedule();

                const interval = setInterval(() => {
                    loadElevatorStatus();
                    loadNotifications();
                }, 30000);

                return () => clearInterval(interval);
            }, []);

            useEffect(() => {
                switch (currentView) {
                    case 'elevators':
                        loadElevatorStatus();
                        break;
                    case 'requests':
                        loadServiceRequests();
                        break;
                    case 'maintenance':
                        loadMaintenanceSchedule();
                        break;
                    default:
                        break;
                }
            }, [currentView]);

            const NavigationMenu = () => (
                <nav className={`fixed left-0 top-0 h-full w-64 bg-gradient-to-b from-blue-900 to-blue-800 text-white transform transition-transform duration-300 ease-in-out z-50 ${mobileMenuOpen ? 'translate-x-0' : '-translate-x-full'} lg:translate-x-0`}>
                    <div className="p-6">
                        <div className="flex items-center justify-between mb-8">
                            <div className="flex items-center">
                                <div className="h-8 w-8 bg-yellow-400 rounded mr-2 flex items-center justify-center text-blue-900 font-bold">⚡</div>
                                <span className="text-xl font-bold">SmartLift</span>
                            </div>
                            <button 
                                onClick={() => setMobileMenuOpen(false)}
                                className="lg:hidden text-white"
                            >
                                ✕
                            </button>
                        </div>
                        
                        <ul className="space-y-2">
                            <li>
                                <button
                                    onClick={() => setCurrentView('dashboard')}
                                    className={`w-full flex items-center px-4 py-3 rounded-lg transition-colors ${currentView === 'dashboard' ? 'bg-blue-700 text-yellow-400' : 'text-blue-100 hover:bg-blue-700'}`}
                                >
                                    <span className="mr-3">🏠</span>
                                    Dashboard
                                </button>
                            </li>
                            <li>
                                <button
                                    onClick={() => setCurrentView('elevators')}
                                    className={`w-full flex items-center px-4 py-3 rounded-lg transition-colors ${currentView === 'elevators' ? 'bg-blue-700 text-yellow-400' : 'text-blue-100 hover:bg-blue-700'}`}
                                >
                                    <span className="mr-3">📊</span>
                                    Elevator Status
                                </button>
                            </li>
                            <li>
                                <button
                                    onClick={() => setCurrentView('requests')}
                                    className={`w-full flex items-center px-4 py-3 rounded-lg transition-colors ${currentView === 'requests' ? 'bg-blue-700 text-yellow-400' : 'text-blue-100 hover:bg-blue-700'}`}
                                >
                                    <span className="mr-3">🔧</span>
                                    Service Requests
                                </button>
                            </li>
                            <li>
                                <button
                                    onClick={() => setCurrentView('newRequest')}
                                    className={`w-full flex items-center px-4 py-3 rounded-lg transition-colors ${currentView === 'newRequest' ? 'bg-blue-700 text-yellow-400' : 'text-blue-100 hover:bg-blue-700'}`}
                                >
                                    <span className="mr-3">💬</span>
                                    New Request
                                </button>
                            </li>
                            <li>
                                <button
                                    onClick={() => setCurrentView('maintenance')}
                                    className={`w-full flex items-center px-4 py-3 rounded-lg transition-colors ${currentView === 'maintenance' ? 'bg-blue-700 text-yellow-400' : 'text-blue-100 hover:bg-blue-700'}`}
                                >
                                    <span className="mr-3">📅</span>
                                    Maintenance
                                </button>
                            </li>
                            <li>
                                <button
                                    onClick={() => setCurrentView('emergency')}
                                    className={`w-full flex items-center px-4 py-3 rounded-lg transition-colors ${currentView === 'emergency' ? 'bg-red-600 text-white' : 'text-blue-100 hover:bg-red-600'}`}
                                >
                                    <span className="mr-3">📞</span>
                                    Emergency
                                </button>
                            </li>
                        </ul>
                    </div>
                    
                    <div className="absolute bottom-0 left-0 right-0 p-6 border-t border-blue-700">
                        <div className="flex items-center">
                            <div className="bg-blue-600 rounded-full p-2 mr-3">
                                <span className="text-sm">👤</span>
                            </div>
                            <div>
                                <div className="font-medium">Golden Plaza Hotel</div>
                                <div className="text-sm text-blue-300">Premium Customer</div>
                            </div>
                        </div>
                    </div>
                </nav>
            );

            const DashboardView = () => (
                <div className="space-y-6">
                    {error && (
                        <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
                            <div className="text-red-700">{error}</div>
                            <button 
                                onClick={() => setError(null)}
                                className="text-red-600 underline text-sm mt-2"
                            >
                                Dismiss
                            </button>
                        </div>
                    )}
                    
                    <div className="bg-white rounded-lg shadow-lg p-6">
                        <div className="flex items-center justify-between mb-4">
                            <h2 className="text-2xl font-bold text-gray-800">System Overview</h2>
                            <button
                                onClick={() => {
                                    loadElevatorStatus();
                                    loadNotifications();
                                }}
                                className="flex items-center text-blue-600 hover:text-blue-800"
                                disabled={loading}
                            >
                                <span className={`mr-1 ${loading ? 'animate-spin' : ''}`}>🔄</span>
                                Refresh
                            </button>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                            <div className="bg-gradient-to-r from-green-500 to-green-600 text-white p-4 rounded-lg">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <div className="text-3xl font-bold">{systemSummary.operational || 0}</div>
                                        <div className="text-green-100">Operational</div>
                                    </div>
                                    <div className="text-3xl">✅</div>
                                </div>
                            </div>
                            <div className="bg-gradient-to-r from-yellow-500 to-yellow-600 text-white p-4 rounded-lg">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <div className="text-3xl font-bold">{systemSummary.maintenance || 0}</div>
                                        <div className="text-yellow-100">In Service</div>
                                    </div>
                                    <div className="text-3xl">🔧</div>
                                </div>
                            </div>
                            <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-4 rounded-lg">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <div className="text-3xl font-bold">{serviceRequests.length}</div>
                                        <div className="text-blue-100">Active Requests</div>
                                    </div>
                                    <div className="text-3xl">💬</div>
                                </div>
                            </div>
                            <div className="bg-gradient-to-r from-purple-500 to-purple-600 text-white p-4 rounded-lg">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <div className="text-3xl font-bold">{systemSummary.uptime || 0}%</div>
                                        <div className="text-purple-100">Uptime</div>
                                    </div>
                                    <div className="text-3xl">📈</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div className="bg-white rounded-lg shadow-lg p-6">
                            <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                                <span className="mr-2">🔔</span>
                                Recent Notifications
                            </h3>
                            <div className="space-y-3">
                                {notifications.slice(0, 3).map(notification => (
                                    <div key={notification.id} className={`p-3 rounded-lg border-l-4 ${
                                        notification.type === 'alert' ? 'border-red-500 bg-red-50' : 'border-blue-500 bg-blue-50'
                                    }`}>
                                        <div className="text-sm font-medium text-gray-800">{notification.message}</div>
                                        <div className="text-xs text-gray-600 mt-1">{notification.time_ago}</div>
                                    </div>
                                ))}
                            </div>
                        </div>

                        <div className="bg-white rounded-lg shadow-lg p-6">
                            <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                                <span className="mr-2">⚡</span>
                                Quick Actions
                            </h3>
                            <div className="space-y-3">
                                <button 
                                    onClick={() => setCurrentView('newRequest')}
                                    className="w-full bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-lg flex items-center justify-center transition-colors"
                                    disabled={loading}
                                >
                                    <span className="mr-2">💬</span>
                                    Submit Service Request
                                </button>
                                <button 
                                    onClick={() => setCurrentView('emergency')}
                                    className="w-full bg-red-600 hover:bg-red-700 text-white px-4 py-3 rounded-lg flex items-center justify-center transition-colors"
                                >
                                    <span className="mr-2">📞</span>
                                    Emergency Contact
                                </button>
                                <button 
                                    onClick={() => setCurrentView('maintenance')}
                                    className="w-full bg-green-600 hover:bg-green-700 text-white px-4 py-3 rounded-lg flex items-center justify-center transition-colors"
                                >
                                    <span className="mr-2">📅</span>
                                    View Maintenance Schedule
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            );

            const ElevatorStatusView = () => (
                <div className="space-y-6">
                    <div className="bg-white rounded-lg shadow-lg p-6">
                        <h2 className="text-2xl font-bold text-gray-800 mb-6">Elevator Status Monitor</h2>
                        {loading && <div className="text-center py-4">Loading elevator status...</div>}
                        <div className="grid gap-6">
                            {elevatorStatus.map(elevator => (
                                <div key={elevator.id} className="border border-gray-200 rounded-lg p-6">
                                    <div className="flex items-center justify-between mb-4">
                                        <h3 className="text-lg font-semibold text-gray-800">
                                            Elevator {elevator.id} - {elevator.location}
                                        </h3>
                                        <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                                            elevator.status === 'operational' 
                                                ? 'bg-green-100 text-green-800' 
                                                : 'bg-yellow-100 text-yellow-800'
                                        }`}>
                                            {elevator.status === 'operational' ? 'Operational' : 'Maintenance'}
                                        </span>
                                    </div>
                                    
                                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                                        <div>
                                            <label className="text-sm font-medium text-gray-600">Current Floor</label>
                                            <div className="text-2xl font-bold text-blue-600">{elevator.current_floor}</div>
                                        </div>
                                        <div>
                                            <label className="text-sm font-medium text-gray-600">Capacity</label>
                                            <div className="text-2xl font-bold text-gray-800">{elevator.capacity_percentage}</div>
                                        </div>
                                        <div>
                                            <label className="text-sm font-medium text-gray-600">Last Service</label>
                                            <div className="text-sm text-gray-600">{elevator.last_service_date}</div>
                                        </div>
                                        <div className="flex items-center justify-end">
                                            <div className="text-4xl">
                                                {elevator.status === 'operational' ? '✅' : '🔧'}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            );

            const ServiceRequestsView = () => (
                <div className="space-y-6">
                    <div className="bg-white rounded-lg shadow-lg p-6">
                        <div className="flex items-center justify-between mb-6">
                            <h2 className="text-2xl font-bold text-gray-800">Service Requests</h2>
                            <button 
                                onClick={() => setCurrentView('newRequest')}
                                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center transition-colors"
                            >
                                <span className="mr-2">💬</span>
                                New Request
                            </button>
                        </div>
                        
                        {loading && <div className="text-center py-4">Loading service requests...</div>}
                        
                        <div className="space-y-4">
                            {serviceRequests.map(request => (
                                <div key={request.id} className="border border-gray-200 rounded-lg p-6">
                                    <div className="flex items-center justify-between mb-4">
                                        <h3 className="text-lg font-semibold text-gray-800">#{request.id} - {request.elevator}</h3>
                                        <div className="flex items-center space-x-3">
                                            <span className={`px-2 py-1 rounded text-xs font-medium ${
                                                request.priority === 'High' ? 'bg-red-100 text-red-800' :
                                                request.priority === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                                                'bg-green-100 text-green-800'
                                            }`}>
                                                {request.priority} Priority
                                            </span>
                                            <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                                                request.status === 'In Progress' ? 'bg-blue-100 text-blue-800' :
                                                request.status === 'Completed' ? 'bg-green-100 text-green-800' :
                                                'bg-gray-100 text-gray-800'
                                            }`}>
                                                {request.status}
                                            </span>
                                        </div>
                                    </div>
                                    
                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                        <div>
                                            <label className="font-medium text-gray-600">Issue:</label>
                                            <div className="text-gray-800">{request.issue}</div>
                                        </div>
                                        <div>
                                            <label className="font-medium text-gray-600">Technician:</label>
                                            <div className="text-gray-800">{request.technician}</div>
                                        </div>
                                        <div>
                                            <label className="font-medium text-gray-600">Est. Completion:</label>
                                            <div className="text-gray-800">{request.estimated_completion}</div>
                                        </div>
                                    </div>
                                    
                                    <div className="mt-4 flex space-x-3">
                                        <button className="text-blue-600 hover:text-blue-800 text-sm font-medium">
                                            View Details
                                        </button>
                                        <button className="text-green-600 hover:text-green-800 text-sm font-medium">
                                            Message Technician
                                        </button>
                                    </div>
                                </div>
                            ))}
                            
                            {serviceRequests.length === 0 && !loading && (
                                <div className="text-center py-8 text-gray-500">
                                    No service requests found. Click "New Request" to submit one.
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            );

            const NewRequestView = () => (
                <div className="space-y-6">
                    <div className="bg-white rounded-lg shadow-lg p-6">
                        <h2 className="text-2xl font-bold text-gray-800 mb-6">Submit Service Request</h2>
                        
                        <div className="space-y-6">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Select Elevator *
                                </label>
                                <select 
                                    value={newRequest.elevator_id}
                                    onChange={(e) => setNewRequest({...newRequest, elevator_id: e.target.value})}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    required
                                >
                                    <option value="">Choose elevator...</option>
                                    <option value="A">Elevator A - Main Lobby</option>
                                    <option value="B">Elevator B - North Tower</option>
                                    <option value="C">Elevator C - Parking Garage</option>
                                </select>
                            </div>
                            
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Priority Level
                                </label>
                                <select 
                                    value={newRequest.priority}
                                    onChange={(e) => setNewRequest({...newRequest, priority: e.target.value})}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                >
                                    <option value="Low">Low Priority</option>
                                    <option value="Medium">Medium Priority</option>
                                    <option value="High">High Priority</option>
                                </select>
                            </div>
                            
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Issue Description *
                                </label>
                                <textarea
                                    value={newRequest.description}
                                    onChange={(e) => setNewRequest({...newRequest, description: e.target.value})}
                                    rows={4}
                                    placeholder="Please describe the issue in detail..."
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    required
                                />
                            </div>
                            
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Preferred Contact Method
                                </label>
                                <div className="space-y-2">
                                    <label className="flex items-center">
                                        <input
                                            type="radio"
                                            value="email"
                                            checked={newRequest.contact_preference === 'email'}
                                            onChange={(e) => setNewRequest({...newRequest, contact_preference: e.target.value})}
                                            className="mr-2"
                                        />
                                        Email
                                    </label>
                                    <label className="flex items-center">
                                        <input
                                            type="radio"
                                            value="phone"
                                            checked={newRequest.contact_preference === 'phone'}
                                            onChange={(e) => setNewRequest({...newRequest, contact_preference: e.target.value})}
                                            className="<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SmartLift Customer Portal</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https